# Redirect all HTTP traffic to HTTPS for security
server {
    listen 80;
    server_name _; # Catches all hostnames
    return 301 https://$host$request_uri;
}

# Main server configuration for HTTPS
server {
    listen 443 ssl;
    server_name _; # Catches all hostnames

    # Placeholder paths for SSL certificates.
    # The user must place their actual certificate and key in a volume
    # mounted to /etc/nginx/ssl/ in the container.
    ssl_certificate /etc/nginx/ssl/quicksave.pem;
    ssl_certificate_key /etc/nginx/ssl/quicksave.key;

    # Modern SSL/TLS settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    # Set the maximum allowed size of the client request body.
    # This is necessary for uploading larger files, such as photos.
    client_max_body_size 20M;

    # Main location block to proxy requests to the Python app
    location / {
        # Forward the request to the 'app' service running on port 8000
        proxy_pass http://app:8000;
        # fix img upload maybe
	proxy_request_buffering off;
        # Set headers to pass necessary information to the backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Add a health check endpoint for monitoring if needed in the future
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }
}
